/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
/* #include "keymap_italian.h" */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// Layer definitions
#define BASE 0
#define SYMBOLS 1
#define ARROWS 2
#define NUMBERS 3
#define SETTINGS 4
// -----------------

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};


/ {
	behaviors {
        #include "macros.dtsi"

        hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };
    hs: homerow_shifts {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_SHIFTS";
        #binding-cells = <2>;
        tapping-term-ms = <150>;
        quick_tap_ms = <0>;
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
    };
    hsl: homerow_shifts_layer {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_SHIFTS_LAYER";
        #binding-cells = <2>;
        tapping-term-ms = <150>;
        quick_tap_ms = <0>;
        flavor = "balanced";
        bindings = <&kp>, <&to>;
    };
    	td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    bl: layertap {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYERTAP";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&to>, <&kp>;
        };

	};


	combos {
		compatible = "zmk,combos";
          combo_del {
          timeout-ms = <50>;
    key-positions = <0 1>;
          bindings = <&kp DEL>;
          layers = <0>;
      };
      combo_esc { 
          timeout-ms = <50>;
          key-positions = <23 24>;
          bindings = <&kp ESC>;
          layers = <0>;
      };
      combo_ent {
          timeout-ms = <50>;
    key-positions = <20 21>;
          bindings = <&kp RET>;
          layers = <0>;
      };
      combo_backspace {
          timeout-ms = <50>;
    key-positions = <8 9>;
          bindings = <&kp BACKSPACE>;
          layers = <0>;
      };
      combo_layer_3 {
          timeout-ms = <50>;
    key-positions = <27 28>;
          bindings = <&to 3>;
      };
      combo_layer_2 {
          timeout-ms = <50>;
          key-positions = <17 18>;
          bindings = <&to 2>;
      };
      combo_dollar {
          timeout-ms = <50>;
    key-positions = <22 23>;
          bindings = <&kp DOLLAR>;
          layers = <0>;
      };
      combo_n0 {
          timeout-ms = <50>;
    key-positions = <26 27>;
          bindings = <&kp N0>;
          layers = <0>;
      };
	};

	keymap {
		compatible = "zmk,keymap";
		// Base alpha layer
    default_layer {
        bindings = <
        &kp Q   &kp W        &kp E        &kp R        &kp T            &kp Y   &kp U          &kp I                 &kp O          &kp P   /* 0-9 */
        &kp A   &hm LCTL S   &hm LALT D   &hm LGUI F   &kp G            &kp H   &hm RGUI J     &hm RALT K            &hm RCTL L     &kp SEMI   /* 10-19 */
        &kp Z   &kp X        &kp C        &kp V        &kp B            &kp N   &kp M          &td UNDERSCORE COMMA  &td EXCL DOT   &td MINUS SLASH   /* 20-29 */
                                &kp LCTRL &kp LEFT_SHIFT                &mt LC(LS(LALT)) SPACE &tog 1 
        >;
    };

    layer_Layer___2 {
        bindings = <
        &kp ESCAPE         &kp AT_SIGN    &kp HASH    &kp DOLLAR          &kp PERCENT                  &kp CARET         &kp AMPERSAND         &kp ASTERISK              &none              &kp BACKSPACE  
        &td LS(TAB) TAB    &kp EQUAL      &kp GRAVE   &kp SINGLE_QUOTE    &kp SINGLE_QUOTE             &kp BACKSLASH     &kp LEFT_BRACE        &kp RIGHT_BRACE           &kp PIPE           &kp ENTER 
        &kp TILDE          &trans         &kp TILDE   &kp DOUBLE_QUOTES   &kp DOUBLE_QUOTES            &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS     &kp RIGHT_BRACKET  &to 2
                                      &to 0 &kp LEFT_SHIFT                &mt RIGHT_ALT SPACE  &to 3   
        >;
    };

    layer_Layer__3 {
        bindings = <
          &kp ESC  &trans  &trans  &trans   &trans               &kp LEFT_BRACKET   &kp LG(RBKT)  &kp LG(LBKT)  &kp RIGHT_BRACKET  &kp BACKSPACE   
          &td LS(TAB) TAB  &trans  &trans  &trans  &kp DEL               &kp LEFT  &kp DOWN   &kp UP          &kp RIGHT      &kp ENTER   
          &mo 4   &trans  &trans  &trans   &trans                   &trans    &trans   &trans             &trans         &trans   
                                 &to 0     &kp LCTL          &mt RIGHT_ALT SPACE &to 1                       
        >;
    };

    layer_Layer__4 {
        bindings = <
          &kp ESC  &kp C_PP    &kp C_PREV    &kp C_NEXT       &td PIPE UNDERSCORE        &kp MINUS  &kp N7        &kp N8  &kp N9  &kp BACKSPACE   
          &td LS(TAB) TAB   &macro_px  &hm LEFT_SHIFT C_VOL_DN  &hm LGUI C_VOL_UP        &kp PLUS              &kp EQUAL  &kp N4        &kp N5  &kp N6      &kp ENTER   
          &kp LCTL &kp PRCNT     &kp SLASH       &kp STAR      &kp PERIOD                &kp N0  &kp N1        &kp N2  &kp N3          &to 2   
                                             &to 0      &kp LGUI                         &mt RIGHT_ALT SPACE   &to 1   
        >;
    };


		settings_layer {
				bindings = <
				&bootloader &none &none &bt BT_CLR &bt BT_SEL 0               &bt BT_SEL 3 &none &none &none &bootloader 
				&none &none &none &none      &bt BT_SEL 1 						  &bt BT_SEL 4 &none &none &none &none
				&none &none &none &none      &bt BT_SEL 2               &bt BT_SEL 5 &none &none &none &none
										&to 0 &none                         &none &none 
				>;
		};
	};
};
